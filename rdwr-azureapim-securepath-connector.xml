<policies>
    <inbound>
        <base />
        <set-variable name="rdwrAppEpAddr" value="{{rdwr-app-ep-addr}}" />
        <set-variable name="rdwrAppEpPort" value="@(int.Parse("{{rdwr-app-ep-port}}"))" />
        <set-variable name="rdwrAppEpSsl" value="@(bool.Parse("{{rdwr-app-ep-ssl}}"))" />
        <set-variable name="rdwrAppEpTimeout" value="@(int.Parse("{{rdwr-app-ep-timeout-seconds}}"))" />
        <set-variable name="rdwrAppId" value="{{rdwr-app-id}}" />
        <set-variable name="rdwrApiKey" value="{{rdwr-api-key}}" />
        <set-variable name="rdwrTrueClientIpHeaderNameFromNV" value="{{rdwr-true-client-ip-header}}" />
        <set-variable name="rdwrBodyMaxSize" value="@(long.Parse("{{rdwr-body-max-size-bytes}}"))" />
        <set-variable name="rdwrPartialBodySize" value="@(long.Parse("{{rdwr-partial-body-size-bytes}}"))" />
        <set-variable name="staticExtensionsEnabled" value="@(bool.Parse("{{static-extensions-enabled}}"))" />
        <set-variable name="staticMethodsNoInspect" value="{{static-list-of-methods-not-to-inspect}}" />
        <set-variable name="staticBypassedExts" value="{{static-list-of-bypassed-extensions}}" />
        <set-variable name="staticInspectWithQuery" value="@(bool.Parse("{{static-inspect-if-query-string-exists}}"))" />
        <set-variable name="chunkedAllowedTypes" value="{{chunked-request-allowed-content-types}}" />
        <set-variable name="pluginInfo" value="{{plugin-version-info}}" />
        <choose>
            <when condition="@(string.IsNullOrEmpty((string)context.Variables["rdwrAppId"]) || string.IsNullOrEmpty((string)context.Variables["rdwrApiKey"]) || string.IsNullOrEmpty((string)context.Variables["rdwrAppEpAddr"]))">
                <return-response>
                    <set-status code="500" reason="Configuration Error" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{ "error": "InternalConfigurationError", "message": "Security provider configuration is incomplete." }</set-body>
                </return-response>
            </when>
        </choose>
        <choose>
            <when condition="@(context.Request.Headers.Any(h => h.Key.ToLower().StartsWith("x-rdwr-")))">
                <return-response>
                    <set-status code="403" reason="Forbidden" />
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>{ "error": "ForbiddenHeader", "message": "Request contains a disallowed x-rdwr-* header." }</set-body>
                </return-response>
            </when>
        </choose>
        <set-variable name="shouldBypassRadware" value="@(false)" />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault("staticExtensionsEnabled", false))">
                <set-variable name="reqPathForExt" value="@(context.Request.Url.Path.ToLower())" />
                <set-variable name="reqMethod" value="@(context.Request.Method.ToUpper())" />
                <set-variable name="reqQuery" value="@(context.Request.Url.QueryString)" />
                <set-variable name="fileExt" value="@{
                    string path = (string)context.Variables.GetValueOrDefault("reqPathForExt","");
                    string extension = "";
                    if (!string.IsNullOrEmpty(path))
                    {
                        int lastDot = path.LastIndexOf('.');
                        if (lastDot != -1 && lastDot < path.Length - 1)
                        {
                            extension = path.Substring(lastDot + 1);
                        }
                    }
                    return extension;
                }" />
                <set-variable name="isBypassCandidateMethod" value="@(((string)context.Variables.GetValueOrDefault("staticMethodsNoInspect","")).ToUpper().Split(',').Contains((string)context.Variables.GetValueOrDefault("reqMethod","")))" />
                <set-variable name="isBypassCandidateExtension" value="@(!string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("fileExt","")) && ((string)context.Variables.GetValueOrDefault("staticBypassedExts","")).ToLower().Split(',').Contains((string)context.Variables.GetValueOrDefault("fileExt","")))" />
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault("isBypassCandidateMethod", false) && context.Variables.GetValueOrDefault("isBypassCandidateExtension", false))">
                        <choose>
                            <when condition="@(context.Variables.GetValueOrDefault("staticInspectWithQuery", false) && !string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("reqQuery","")))">
                                <set-variable name="shouldBypassRadware" value="@(false)" />
                            </when>
                            <otherwise>
                                <set-variable name="shouldBypassRadware" value="@(true)" />
                            </otherwise>
                        </choose>
                    </when>
                </choose>
            </when>
        </choose>
        <choose>
            <when condition="@( !((bool)context.Variables["shouldBypassRadware"]) )">
                <set-variable name="radwareReqBody" value="" />
                <set-variable name="radwareContentLength" value="0" />
                <!-- This was '0' as string, should be long for consistency: @(0L) -->
                <set-variable name="setPartialBodyHeader" value="@(false)" />
                <set-variable name="origContentLengthStr" value="@(context.Request.Headers.GetValueOrDefault("Content-Length", default(string[]))?.FirstOrDefault())" />
                <set-variable name="origTransferEncoding" value="@(context.Request.Headers.GetValueOrDefault("Transfer-Encoding", default(string[]))?.FirstOrDefault()?.ToLower() ?? "")" />
                <set-variable name="origContentType" value="@(context.Request.Headers.GetValueOrDefault("Content-Type", default(string[]))?.FirstOrDefault() ?? "")" />
                <set-variable name="readBodyFlag" value="@(false)" />
                <choose>
                    <when condition="@(!string.IsNullOrEmpty((string)context.Variables["origContentLengthStr"]))">
                        <set-variable name="origContentLength" value="@(long.Parse((string)context.Variables["origContentLengthStr"]))" />
                        <choose>
                            <!-- FIX APPLIED IN THE CONDITION BELOW -->
                            <when condition="@(context.Variables.GetValueOrDefault("origContentLength", 0L) > 0 && context.Variables.GetValueOrDefault("origContentLength", 0L) <= context.Variables.GetValueOrDefault("rdwrBodyMaxSize", long.MaxValue))">
                                <set-variable name="readBodyFlag" value="@(true)" />
                            </when>
                        </choose>
                    </when>
                    <when condition="@(((string)context.Variables["origTransferEncoding"]) == "chunked")">
                        <set-variable name="contentTypeShort" value="@{
                            string ct = (string)context.Variables["origContentType"];
                            string result = ""; 
                            if (!string.IsNullOrEmpty(ct))
                            {
                                int idx = ct.IndexOf(';');
                                result = (idx == -1 ? ct : ct.Substring(0, idx)).Trim().ToLower();
                            }
                            return result;
                        }" />
                        <choose>
                            <when condition="@(((string)context.Variables["chunkedAllowedTypes"]).ToLower().Split(',').Contains((string)context.Variables["contentTypeShort"]))">
                                <set-variable name="readBodyFlag" value="@(true)" />
                            </when>
                        </choose>
                    </when>
                </choose>
                <choose>
                    <when condition="@(context.Variables.GetValueOrDefault("readBodyFlag", false))">
                        <set-variable name="currentBody" value="@(context.Request.Body.As<string>(preserveContent: true) ?? "")" />
                        <set-variable name="currentBodyLength" value="@(((string)context.Variables["currentBody"]).Length)" />
                        <choose>
                            <!-- FIX APPLIED IN THE CONDITION BELOW -->
                            <when condition="@(context.Variables.GetValueOrDefault("currentBodyLength", 0) > context.Variables.GetValueOrDefault("rdwrBodyMaxSize", long.MaxValue))">
                                <set-variable name="radwareReqBody" value="" />
                                <set-variable name="radwareContentLength" value="@(0L)" />
                            </when>
                            <!-- FIX APPLIED IN THE CONDITION BELOW -->
                            <when condition="@(context.Variables.GetValueOrDefault("currentBodyLength", 0) > context.Variables.GetValueOrDefault("rdwrPartialBodySize", long.MaxValue))">
                                <set-variable name="radwareReqBody" value="@(((string)context.Variables["currentBody"]).Substring(0, (int)context.Variables.GetValueOrDefault("rdwrPartialBodySize", 0L)))" />
                                <set-variable name="radwareContentLength" value="@(context.Variables.GetValueOrDefault("rdwrPartialBodySize", 0L))" />
                                <set-variable name="setPartialBodyHeader" value="@(true)" />
                            </when>
                            <otherwise>
                                <set-variable name="radwareReqBody" value="@((string)context.Variables["currentBody"])" />
                                <!-- FIX APPLIED IN THE ASSIGNMENT BELOW -->
                                <set-variable name="radwareContentLength" value="@((long)context.Variables.GetValueOrDefault("currentBodyLength", 0))" />
                            </otherwise>
                        </choose>
                    </when>
                </choose>
                <!-- Determine Client IP to send to Radware -->
                <set-variable name="clientIpToSend" value="@(context.Request.IpAddress)" />
                <set-variable name="configuredHeaderNameForClientIp" value="@((string)context.Variables.GetValueOrDefault("rdwrTrueClientIpHeaderNameFromNV", "##DISABLED##"))" />
                <choose>
                    <when condition="@(((string)context.Variables["configuredHeaderNameForClientIp"]) != "##DISABLED##" && !string.IsNullOrEmpty((string)context.Variables["configuredHeaderNameForClientIp"]) && context.Request.Headers.ContainsKey((string)context.Variables["configuredHeaderNameForClientIp"]))">
                        <set-variable name="ipFromConfiguredHeader" value="@(context.Request.Headers.GetValueOrDefault((string)context.Variables["configuredHeaderNameForClientIp"], default(string[]))?.FirstOrDefault())" />
                        <choose>
                            <when condition="@(!string.IsNullOrEmpty((string)context.Variables.GetValueOrDefault("ipFromConfiguredHeader", "")))">
                                <set-variable name="clientIpToSend" value="@((string)context.Variables["ipFromConfiguredHeader"])" />
                            </when>
                        </choose>
                    </when>
                </choose>
                <set-variable name="urlScheme" value="@(context.Variables.GetValueOrDefault("rdwrAppEpSsl", true) ? "https" : "http")" />
                <set-variable name="urlHost" value="@((string)context.Variables.GetValueOrDefault("rdwrAppEpAddr", "localhost"))" />
                <set-variable name="urlPortValue" value="@(context.Variables.GetValueOrDefault("rdwrAppEpPort", 443))" />
                <set-variable name="urlPathAndQueryToUse" value="@(context.Request.OriginalUrl.Path + (string.IsNullOrEmpty(context.Request.OriginalUrl.QueryString) ? "" : context.Request.OriginalUrl.QueryString))" />
                <send-request mode="new" response-variable-name="radwareResponse" timeout="@((int)context.Variables["rdwrAppEpTimeout"])" ignore-error="false">
                    <set-url>@($"{((string)context.Variables["urlScheme"])}://{((string)context.Variables["urlHost"])}:{((int)context.Variables["urlPortValue"])}{((string)context.Variables["urlPathAndQueryToUse"])}")</set-url>
                    <set-method>@(context.Request.Method)</set-method>
                    <set-header name="Host" exists-action="override">
                        <value>@(context.Request.OriginalUrl.Host)</value>
                    </set-header>
                    <set-header name="X-Rdwr-App-Id" exists-action="override">
                        <value>@((string)context.Variables["rdwrAppId"])</value>
                    </set-header>
                    <set-header name="X-Rdwr-Api-Key" exists-action="override">
                        <value>@((string)context.Variables["rdwrApiKey"])</value>
                    </set-header>
                    <set-header name="X-Rdwr-Connector-Ip" exists-action="override">
                        <value>@((string)context.Variables["clientIpToSend"])</value>
                    </set-header>
                    <set-header name="X-Rdwr-Connector-Port" exists-action="override">
                        <value>@(context.Request.OriginalUrl.Port.ToString())</value>
                    </set-header>
                    <set-header name="X-Rdwr-Connector-Scheme" exists-action="override">
                        <value>@(context.Request.OriginalUrl.Scheme)</value>
                    </set-header>
                    <set-header name="X-Rdwr-Plugin-Info" exists-action="override">
                        <value>@((string)context.Variables["pluginInfo"])</value>
                    </set-header>
                    <set-header name="X-Rdwr-Partial-Body" exists-action="override">
                        <value>@(((bool)context.Variables.GetValueOrDefault("setPartialBodyHeader", false)).ToString().ToLower())</value>
                    </set-header>
                    <set-body>@((string)context.Variables["radwareReqBody"])</set-body>
                </send-request>
                <set-variable name="rwStatus" value="@(((IResponse)context.Variables["radwareResponse"]).StatusCode)" />
                <set-variable name="oopRequestStatusHeader" value="@(((IResponse)context.Variables["radwareResponse"]).Headers.GetValueOrDefault("x-rdwr-oop-request-status", default(string[]))?.FirstOrDefault()?.ToLower() ?? "")" />
                <set-variable name="radwareLocationHeader" value="@(((IResponse)context.Variables["radwareResponse"]).Headers.GetValueOrDefault("Location", default(string[]))?.FirstOrDefault() ?? "")" />
                <choose>
                    <when condition="@((int)context.Variables["rwStatus"] == 200 && (string)context.Variables["oopRequestStatusHeader"] == "allowed")" />
                    <when condition="@((int)context.Variables["rwStatus"] == 301 || (int)context.Variables["rwStatus"] == 302)">
                        <choose>
                            <when condition="@((int)context.Variables["rwStatus"] == 301 && ((string)context.Variables["radwareLocationHeader"]).ToLower().Contains("wrong-api-key.oop.radwarecloud.com"))">
                                <return-response>
                                    <set-status code="502" reason="Upstream Authentication Error" />
                                    <set-header name="Content-Type" exists-action="override">
                                        <value>application/json</value>
                                    </set-header>
                                    <set-body>{ "error": "InvalidUpstreamApiKey", "message": "Security provider reported an invalid API key." }</set-body>
                                </return-response>
                            </when>
                            <otherwise>
                                <return-response response-variable-name="radwareResponse" />
                            </otherwise>
                        </choose>
                    </when>
                    <otherwise>
                        <return-response response-variable-name="radwareResponse" />
                    </otherwise>
                </choose>
            </when>
        </choose>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
        <choose>
            <when condition="@(context.LastError != null && context.LastError.Source == "send-request")">
                <choose>
                    <when condition="@(context.LastError.Reason == "Timeout")">
                        <return-response>
                            <set-status code="504" reason="Gateway Timeout" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>{ "error": "RadwareTimeout", "message": "Security validation service timed out." }</set-body>
                        </return-response>
                    </when>
                    <otherwise>
                        <return-response>
                            <set-status code="502" reason="Bad Gateway" />
                            <set-header name="Content-Type" exists-action="override">
                                <value>application/json</value>
                            </set-header>
                            <set-body>{ "error": "RadwareCommunicationError", "message": "Error communicating with the security validation service." }</set-body>
                        </return-response>
                    </otherwise>
                </choose>
            </when>
        </choose>
    </on-error>
</policies>
